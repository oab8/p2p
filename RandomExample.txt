# This script builds a randomly connected graph and prints in-degree 
# distribution, path length and clustering coefficient information.
# Basically it produces the data used as baseline.

SIZE 10000

CYCLE 1000
CYCLES 300

CACHESIZE 50

random.seed 1234567890
network.size SIZE
simulation.endtime CYCLE*CYCLES
simulation.logtime CYCLE


protocol.gossip IdleProtocol
{
}

#init.wire WireKOut
#{
#	protocol gossip
#	k CACHESIZE
#}

init.wire WireStar
{
	protocol gossip
}

# This initializes the topology as a ring. Use should also use WireStar to
# initialize it as a star.
#init.wire WireRingLattice
#{
#	protocol gossip
#	k CACHESIZE
#}


control.degree example.reports.InDegreeObserver
{
	protocol gossip

	step CYCLE
	starttime 299000
	endtime 300000
}

control.graphPL GraphStatsPrinter
{
	protocol gossip
	step CYCLE
	undir true
	nl 10
	#nc 1000
}